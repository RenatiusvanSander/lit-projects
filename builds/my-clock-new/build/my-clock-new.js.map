{"version":3,"file":"my-clock-new.js","sourceRoot":"","sources":["../src/my-clock-new.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAGnD,IAAM,UAAU,GAAhB,MAAM,UAAW,SAAQ,UAAU;IAOxC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAC,CAAC,CAAC;QACjJ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC9C,CAAC;IAEQ,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnF,CAAC;IAEO,iBAAiB;QACvB,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAC3D,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC;QAEjC,OAAO,aAAa,CAAC;IACvB,CAAC;IAEQ,oBAAoB;QAC1B,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACtC,CAAC;IAEkB,MAAM;QACvB,OAAO,IAAI,CAAA;4BACa,IAAI,CAAC,WAAW;KACvC,CAAC;IACJ,CAAC;CAEF,CAAA;AAnC2B;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;+CAAsB;AAFpC,UAAU;IADtB,aAAa,CAAC,cAAc,CAAC;GACjB,UAAU,CAqCtB","sourcesContent":["import {LitElement, html} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\n\r\n@customElement('my-clock-new')\r\nexport class MyClockNew extends LitElement {\r\n\r\n  @property({type: String}) currentTime?: string;\r\n\r\n  private _timerInterval:number;\r\n  private _timeFormatter:Intl.DateTimeFormat;\r\n\r\n  constructor() {\r\n    super();\r\n    this._timerInterval = 0;\r\n    this._timeFormatter = new Intl.DateTimeFormat('de-DE', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit'});\r\n    this.currentTime = this.updateCurrentTime();\r\n  }\r\n\r\n  override connectedCallback() {\r\n    super.connectedCallback();\r\n    this._timerInterval = setInterval(() => this.updateCurrentTime(), 1000 /** 60*/);\r\n  }\r\n\r\n  private updateCurrentTime():string {\r\n    let formattedTime = this._timeFormatter.format(Date.now());\r\n    this.currentTime = formattedTime;\r\n\r\n    return formattedTime;\r\n  }\r\n\r\n  override disconnectedCallback() {\r\n     super.disconnectedCallback();\r\n     clearInterval(this._timerInterval);\r\n  }\r\n\r\n  protected override render() {\r\n    return html`\r\n      <p>Current time is: ${this.currentTime}</p>\r\n    `;\r\n  }\r\n\r\n}"]}